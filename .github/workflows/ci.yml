name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'
        cache: true
    
    - name: Get dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Install Xray for testing
      run: |
        # Download and install Xray for configuration validation in tests
        XRAY_VERSION="v25.8.3"
        wget -O /tmp/xray.zip "https://github.com/XTLS/Xray-core/releases/download/${XRAY_VERSION}/Xray-linux-64.zip"
        unzip -d /tmp /tmp/xray.zip
        sudo cp /tmp/xray /usr/local/bin/
        sudo chmod +x /usr/local/bin/xray
        xray version
    
    - name: Run tests
      run: |
        export CGO_ENABLED=1
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.txt
        flags: unittests
        fail_ci_if_error: false
    
    - name: Build binary
      run: |
        go build -v -o xrf cmd/xrf/main.go
        ./xrf --help
    
    - name: Run build script test
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh build-current
    
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable
        cache: true
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.4.0
        args: --timeout=5m
    
  vet:
    name: Go Vet
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'
        cache: true
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go code is not formatted:"
          gofmt -d .
          exit 1
        fi
    
    - name: Check go mod tidy
      run: |
        go mod tidy
        if [ -n "$(git status --porcelain)" ]; then
          echo "go mod tidy would make changes:"
          git diff
          exit 1
        fi