name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
    
    - name: Get dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Install Xray for testing
      run: |
        set -euo pipefail
        # Use shared installation logic
        source scripts/common.sh
        install_xray_for_automation
    
    - name: Run tests
      run: |
        export CGO_ENABLED=1
        go test -v -race -short -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.txt
        flags: unittests
        fail_ci_if_error: false
    
    - name: Build binary
      run: |
        go build -v -o xrf cmd/xrf/main.go
        ./xrf --help
    
    - name: Run build script test
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh build-current
    
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m
    
  vet:
    name: Go Vet
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go code is not formatted:"
          gofmt -d .
          exit 1
        fi
    
    - name: Check go mod tidy
      run: |
        go mod tidy
        if [ -n "$(git status --porcelain)" ]; then
          echo "go mod tidy would make changes:"
          git diff
          exit 1
        fi

  shellcheck:
    name: Shell Scripts Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    - name: Install shellcheck
      run: |
        sudo apt-get update -y
        sudo apt-get install -y shellcheck
    - name: Run shellcheck
      run: |
        shellcheck --version
        shellcheck -x scripts/*.sh

  installer-dry-run:
    name: Installer Dry-Run
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    - name: Exercise version and asset discovery (no downloads)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        source scripts/common.sh

        echo "[Dry-Run] Resolving latest tags..."
        xr_tag=$(get_xray_latest_version)
        xrf_tag=$(get_xrf_latest_version)
        echo "Xray tag: $xr_tag"
        echo "XRF-Go tag: $xrf_tag"

        ua="xrf-go-ci"
        curl_opts=( -fsSL -H "Accept: application/vnd.github+json" -H "User-Agent: ${ua}" )
        if [ -n "${GITHUB_TOKEN:-}" ]; then
          curl_opts+=( -H "Authorization: Bearer ${GITHUB_TOKEN}" )
        fi

        # Check Xray assets for both archs
        for ARCH in amd64 arm64; do
          echo "\n[Xray] Selecting asset for ${ARCH}..."
          xr_json=$(curl "${curl_opts[@]}" "https://api.github.com/repos/XTLS/Xray-core/releases/tags/${xr_tag}")
          if [ "$ARCH" = amd64 ]; then
            name_regex='^Xray-.*linux.*(64|amd64).*\.zip$'
          else
            name_regex='^Xray-.*linux.*(arm64|arm64-v8a).*\.zip$'
          fi
          dl=$(select_asset_url "$xr_json" "$name_regex" || true)
          echo "Selected: ${dl:-<none>}"
          [ -n "${dl:-}" ] && echo "$dl" | grep -qiE '\.zip$'
        done

        # Check XRF-Go assets for both archs (latest release JSON)
        xrf_json=$(curl "${curl_opts[@]}" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
        for ARCH in amd64 arm64; do
          echo "\n[XRF-Go] Selecting asset for ${ARCH}..."
          name_regex="^xrf-.*linux-${ARCH}.*\\.(tar\\.gz|tgz)$"
          dl=$(select_asset_url "$xrf_json" "$name_regex" || true)
          echo "Selected: ${dl:-<none>}"
          [ -n "${dl:-}" ] && echo "$dl" | grep -qiE '\.(tar\.gz|tgz)$'
        done
